name: Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            set -e

            echo "======================================="
            echo "[INFO] Connect & Enter Project"
            echo "======================================="
            cd /home/lxt/project/tech-backend/cmd

            echo
            echo "======================================="
            echo "[INFO] Inject .env from secrets"
            echo "======================================="
            printf '%s\n' "${{ secrets.ENV_FILE_CONTENT }}" > .env
            echo "[INFO] ✅ .env written."

            cd /home/lxt/project/tech-backend

            echo
            echo "======================================="
            echo "[INFO] Git Sync (main)"
            echo "======================================="
            git fetch --all
            git reset --hard origin/main
            git status

            echo
            echo "======================================="
            echo "[INFO] Building & Starting Docker Containers"
            echo "======================================="
            docker compose down
            docker compose pull || true
            docker compose build
            docker compose up -d --remove-orphans

            echo
            echo "======================================="
            echo "[INFO] Wait for containers to start..."
            echo "======================================="
            sleep 5

            echo
            echo "======================================="
            echo "[INFO] Docker container status"
            echo "======================================="
            docker compose ps

            # Check for any Restarting
            if docker compose ps | grep -q "Restarting"; then
              echo
              echo "[ERROR] ❌ One or more containers are Restarting!"
              docker compose logs --tail=50
              exit 1
            fi

            # Check that all containers are Up
            if docker compose ps | grep -v "Up" | grep -v "NAME" | grep -v "-----" | grep .; then
              echo
              echo "[ERROR] ❌ One or more containers are not Up!"
              docker compose ps
              docker compose logs --tail=50
              exit 1
            fi

            echo
            echo "✅ [SUCCESS] All containers are Up and Healthy"
